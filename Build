#!/bin/bash
#
#  Build and test midonet.
#
#  The purpose of this (probably incomplete) script is to verify any
#  dependencies on things not in this git repo, build the midonet
#  software, and run all of the "developer tests," i.e., those that
#  don't require any special external hardware or software setup.
#  Eventually, options should be added to do subsets of this work (e.g.,
#  build and run only some of the tests) and perhaps some support for
#  assisting in the QA tests as well.
#
#  This code has just as much "framework" as it needs, and the framework
#  (such as it is) should be extended as necessary to keep the code
#  clean.
#

usage() {
    err "$@
Usage: $(basename $0) [-c]
    -c   clean build
    -tn  Do not run any tests.
    -ta  Run all tests (unit and integration)
"
}

main() {
    trap -- '
        [ "$NO_INTERNAL_ERROR" = OK ] \
            || echo 1>&2 "INTERNAL ERROR: Uncaught failure in Build script.";
    ' EXIT

    clean=
    test_spec=-DskipFunctionalTests
    while true; do case "$1" in
        -c)     shift; clean=clean;;
        -ta)    shift; test_spec=;;
        -tn)    shift; test_spec=-DskipTests;;
        -*)     usage "Unknown option: $1";;
        *)      break;;
    esac; done
    [ -z "$1" ] || usage "Unknown argument: $1"

    assert_java
    assert_maven
    mvn $clean package $test_spec
    NO_INTERNAL_ERROR=OK
}

assert_java() {
    javac=javac
    [ -n "$JAVA_HOME" ] && javac=$JAVA_HOME/bin/javac

    $javac -version >/dev/null 2>&1 \
        || err "Cannot run $javac (bad \$JAVA_HOME?)"
    ver=$($javac -version 2>&1 | sed -n -e '1s/[^0-9]*//p')

    wanted="1.7.*"
    [[ "$ver" == $wanted ]] || err "Java version $ver, but expected $wanted" "

Perhaps your JAVA_HOME environment variable is set incorrectly or, if
not set, you don't have the right version of Java in your path.

On Debian/Ubuntu systems, ensure that openjdk-7-jdk is installed and,
if you have other JREs installed, you've done
    export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64

Using a Mac? You're on your own. :-)
"
}

assert_maven() {
    mvn --version >/dev/null \
        || err "Failed to run 'mvn'. (Install 'maven' package?)"
    ver=$(mvn --version 2>&1 | sed -n -e '1s/[^0-9]*//p')

    wanted="3.*"
    [[ "$ver" == $wanted ]] || err "Maven version $ver, but expected $wanted"
}

err() {
    echo -e 1>&2 ERROR: "$@"
    NO_INTERNAL_ERROR=OK
    exit 1
}

set -e
main "$@"
