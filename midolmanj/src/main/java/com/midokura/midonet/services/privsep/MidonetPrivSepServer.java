/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.midokura.midonet.services.privsep;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MidonetPrivSepServer {

  /**
   * Define the MidonetPrivSetService
   * 
   * It exposes methods to allow creation/deletion/mac update/readFrame/writeFrame
   * on a tuntap interface.
   */
  public interface Iface {

    public String ping(String ping) throws org.apache.thrift.TException;

    public TunTapInterface createInterface(String ifaceName, InterfaceType ifaceType) throws InvalidOperationException, org.apache.thrift.TException;

    public void deleteTapInterface(TunTapInterface iface) throws InvalidOperationException, org.apache.thrift.TException;

    public void setHardwareAddress(String mac, TunTapInterface iface) throws InvalidOperationException, org.apache.thrift.TException;

    public void writeEthernetFrame(ByteBuffer frame, TunTapInterface iface) throws InvalidOperationException, org.apache.thrift.TException;

    public ByteBuffer readEthernetFrame(TunTapInterface iface, long timeout) throws InvalidOperationException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(String ping, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ping_call> resultHandler) throws org.apache.thrift.TException;

    public void createInterface(String ifaceName, InterfaceType ifaceType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createInterface_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteTapInterface(TunTapInterface iface, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteTapInterface_call> resultHandler) throws org.apache.thrift.TException;

    public void setHardwareAddress(String mac, TunTapInterface iface, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setHardwareAddress_call> resultHandler) throws org.apache.thrift.TException;

    public void writeEthernetFrame(ByteBuffer frame, TunTapInterface iface, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.writeEthernetFrame_call> resultHandler) throws org.apache.thrift.TException;

    public void readEthernetFrame(TunTapInterface iface, long timeout, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.readEthernetFrame_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String ping(String ping) throws org.apache.thrift.TException
    {
      send_ping(ping);
      return recv_ping();
    }

    public void send_ping(String ping) throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      args.setPing(ping);
      sendBase("ping", args);
    }

    public String recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public TunTapInterface createInterface(String ifaceName, InterfaceType ifaceType) throws InvalidOperationException, org.apache.thrift.TException
    {
      send_createInterface(ifaceName, ifaceType);
      return recv_createInterface();
    }

    public void send_createInterface(String ifaceName, InterfaceType ifaceType) throws org.apache.thrift.TException
    {
      createInterface_args args = new createInterface_args();
      args.setIfaceName(ifaceName);
      args.setIfaceType(ifaceType);
      sendBase("createInterface", args);
    }

    public TunTapInterface recv_createInterface() throws InvalidOperationException, org.apache.thrift.TException
    {
      createInterface_result result = new createInterface_result();
      receiveBase(result, "createInterface");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createInterface failed: unknown result");
    }

    public void deleteTapInterface(TunTapInterface iface) throws InvalidOperationException, org.apache.thrift.TException
    {
      send_deleteTapInterface(iface);
      recv_deleteTapInterface();
    }

    public void send_deleteTapInterface(TunTapInterface iface) throws org.apache.thrift.TException
    {
      deleteTapInterface_args args = new deleteTapInterface_args();
      args.setIface(iface);
      sendBase("deleteTapInterface", args);
    }

    public void recv_deleteTapInterface() throws InvalidOperationException, org.apache.thrift.TException
    {
      deleteTapInterface_result result = new deleteTapInterface_result();
      receiveBase(result, "deleteTapInterface");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void setHardwareAddress(String mac, TunTapInterface iface) throws InvalidOperationException, org.apache.thrift.TException
    {
      send_setHardwareAddress(mac, iface);
      recv_setHardwareAddress();
    }

    public void send_setHardwareAddress(String mac, TunTapInterface iface) throws org.apache.thrift.TException
    {
      setHardwareAddress_args args = new setHardwareAddress_args();
      args.setMac(mac);
      args.setIface(iface);
      sendBase("setHardwareAddress", args);
    }

    public void recv_setHardwareAddress() throws InvalidOperationException, org.apache.thrift.TException
    {
      setHardwareAddress_result result = new setHardwareAddress_result();
      receiveBase(result, "setHardwareAddress");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public void writeEthernetFrame(ByteBuffer frame, TunTapInterface iface) throws InvalidOperationException, org.apache.thrift.TException
    {
      send_writeEthernetFrame(frame, iface);
      recv_writeEthernetFrame();
    }

    public void send_writeEthernetFrame(ByteBuffer frame, TunTapInterface iface) throws org.apache.thrift.TException
    {
      writeEthernetFrame_args args = new writeEthernetFrame_args();
      args.setFrame(frame);
      args.setIface(iface);
      sendBase("writeEthernetFrame", args);
    }

    public void recv_writeEthernetFrame() throws InvalidOperationException, org.apache.thrift.TException
    {
      writeEthernetFrame_result result = new writeEthernetFrame_result();
      receiveBase(result, "writeEthernetFrame");
      if (result.ex != null) {
        throw result.ex;
      }
      return;
    }

    public ByteBuffer readEthernetFrame(TunTapInterface iface, long timeout) throws InvalidOperationException, org.apache.thrift.TException
    {
      send_readEthernetFrame(iface, timeout);
      return recv_readEthernetFrame();
    }

    public void send_readEthernetFrame(TunTapInterface iface, long timeout) throws org.apache.thrift.TException
    {
      readEthernetFrame_args args = new readEthernetFrame_args();
      args.setIface(iface);
      args.setTimeout(timeout);
      sendBase("readEthernetFrame", args);
    }

    public ByteBuffer recv_readEthernetFrame() throws InvalidOperationException, org.apache.thrift.TException
    {
      readEthernetFrame_result result = new readEthernetFrame_result();
      receiveBase(result, "readEthernetFrame");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readEthernetFrame failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(String ping, org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(ping, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ping;
      public ping_call(String ping, org.apache.thrift.async.AsyncMethodCallback<ping_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ping = ping;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.setPing(ping);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void createInterface(String ifaceName, InterfaceType ifaceType, org.apache.thrift.async.AsyncMethodCallback<createInterface_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createInterface_call method_call = new createInterface_call(ifaceName, ifaceType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createInterface_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ifaceName;
      private InterfaceType ifaceType;
      public createInterface_call(String ifaceName, InterfaceType ifaceType, org.apache.thrift.async.AsyncMethodCallback<createInterface_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ifaceName = ifaceName;
        this.ifaceType = ifaceType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createInterface", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createInterface_args args = new createInterface_args();
        args.setIfaceName(ifaceName);
        args.setIfaceType(ifaceType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TunTapInterface getResult() throws InvalidOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createInterface();
      }
    }

    public void deleteTapInterface(TunTapInterface iface, org.apache.thrift.async.AsyncMethodCallback<deleteTapInterface_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteTapInterface_call method_call = new deleteTapInterface_call(iface, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteTapInterface_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TunTapInterface iface;
      public deleteTapInterface_call(TunTapInterface iface, org.apache.thrift.async.AsyncMethodCallback<deleteTapInterface_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.iface = iface;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteTapInterface", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteTapInterface_args args = new deleteTapInterface_args();
        args.setIface(iface);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteTapInterface();
      }
    }

    public void setHardwareAddress(String mac, TunTapInterface iface, org.apache.thrift.async.AsyncMethodCallback<setHardwareAddress_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setHardwareAddress_call method_call = new setHardwareAddress_call(mac, iface, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setHardwareAddress_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mac;
      private TunTapInterface iface;
      public setHardwareAddress_call(String mac, TunTapInterface iface, org.apache.thrift.async.AsyncMethodCallback<setHardwareAddress_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mac = mac;
        this.iface = iface;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setHardwareAddress", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setHardwareAddress_args args = new setHardwareAddress_args();
        args.setMac(mac);
        args.setIface(iface);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setHardwareAddress();
      }
    }

    public void writeEthernetFrame(ByteBuffer frame, TunTapInterface iface, org.apache.thrift.async.AsyncMethodCallback<writeEthernetFrame_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeEthernetFrame_call method_call = new writeEthernetFrame_call(frame, iface, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeEthernetFrame_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer frame;
      private TunTapInterface iface;
      public writeEthernetFrame_call(ByteBuffer frame, TunTapInterface iface, org.apache.thrift.async.AsyncMethodCallback<writeEthernetFrame_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.frame = frame;
        this.iface = iface;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeEthernetFrame", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeEthernetFrame_args args = new writeEthernetFrame_args();
        args.setFrame(frame);
        args.setIface(iface);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws InvalidOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_writeEthernetFrame();
      }
    }

    public void readEthernetFrame(TunTapInterface iface, long timeout, org.apache.thrift.async.AsyncMethodCallback<readEthernetFrame_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readEthernetFrame_call method_call = new readEthernetFrame_call(iface, timeout, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readEthernetFrame_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TunTapInterface iface;
      private long timeout;
      public readEthernetFrame_call(TunTapInterface iface, long timeout, org.apache.thrift.async.AsyncMethodCallback<readEthernetFrame_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.iface = iface;
        this.timeout = timeout;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readEthernetFrame", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readEthernetFrame_args args = new readEthernetFrame_args();
        args.setIface(iface);
        args.setTimeout(timeout);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws InvalidOperationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readEthernetFrame();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("createInterface", new createInterface());
      processMap.put("deleteTapInterface", new deleteTapInterface());
      processMap.put("setHardwareAddress", new setHardwareAddress());
      processMap.put("writeEthernetFrame", new writeEthernetFrame());
      processMap.put("readEthernetFrame", new readEthernetFrame());
      return processMap;
    }

    private static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      protected ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping(args.ping);
        return result;
      }
    }

    private static class createInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createInterface_args> {
      public createInterface() {
        super("createInterface");
      }

      protected createInterface_args getEmptyArgsInstance() {
        return new createInterface_args();
      }

      protected createInterface_result getResult(I iface, createInterface_args args) throws org.apache.thrift.TException {
        createInterface_result result = new createInterface_result();
        try {
          result.success = iface.createInterface(args.ifaceName, args.ifaceType);
        } catch (InvalidOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class deleteTapInterface<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteTapInterface_args> {
      public deleteTapInterface() {
        super("deleteTapInterface");
      }

      protected deleteTapInterface_args getEmptyArgsInstance() {
        return new deleteTapInterface_args();
      }

      protected deleteTapInterface_result getResult(I iface, deleteTapInterface_args args) throws org.apache.thrift.TException {
        deleteTapInterface_result result = new deleteTapInterface_result();
        try {
          iface.deleteTapInterface(args.iface);
        } catch (InvalidOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class setHardwareAddress<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setHardwareAddress_args> {
      public setHardwareAddress() {
        super("setHardwareAddress");
      }

      protected setHardwareAddress_args getEmptyArgsInstance() {
        return new setHardwareAddress_args();
      }

      protected setHardwareAddress_result getResult(I iface, setHardwareAddress_args args) throws org.apache.thrift.TException {
        setHardwareAddress_result result = new setHardwareAddress_result();
        try {
          iface.setHardwareAddress(args.mac, args.iface);
        } catch (InvalidOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class writeEthernetFrame<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeEthernetFrame_args> {
      public writeEthernetFrame() {
        super("writeEthernetFrame");
      }

      protected writeEthernetFrame_args getEmptyArgsInstance() {
        return new writeEthernetFrame_args();
      }

      protected writeEthernetFrame_result getResult(I iface, writeEthernetFrame_args args) throws org.apache.thrift.TException {
        writeEthernetFrame_result result = new writeEthernetFrame_result();
        try {
          iface.writeEthernetFrame(args.frame, args.iface);
        } catch (InvalidOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    private static class readEthernetFrame<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readEthernetFrame_args> {
      public readEthernetFrame() {
        super("readEthernetFrame");
      }

      protected readEthernetFrame_args getEmptyArgsInstance() {
        return new readEthernetFrame_args();
      }

      protected readEthernetFrame_result getResult(I iface, readEthernetFrame_args args) throws org.apache.thrift.TException {
        readEthernetFrame_result result = new readEthernetFrame_result();
        try {
          result.success = iface.readEthernetFrame(args.iface, args.timeout);
        } catch (InvalidOperationException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");

    private static final org.apache.thrift.protocol.TField PING_FIELD_DESC = new org.apache.thrift.protocol.TField("ping", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }

    public String ping; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PING((short)1, "ping");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PING
            return PING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PING, new org.apache.thrift.meta_data.FieldMetaData("ping", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    public ping_args(
      String ping)
    {
      this();
      this.ping = ping;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
      if (other.isSetPing()) {
        this.ping = other.ping;
      }
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
      this.ping = null;
    }

    public String getPing() {
      return this.ping;
    }

    public ping_args setPing(String ping) {
      this.ping = ping;
      return this;
    }

    public void unsetPing() {
      this.ping = null;
    }

    /** Returns true if field ping is set (has been assigned a value) and false otherwise */
    public boolean isSetPing() {
      return this.ping != null;
    }

    public void setPingIsSet(boolean value) {
      if (!value) {
        this.ping = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PING:
        if (value == null) {
          unsetPing();
        } else {
          setPing((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PING:
        return getPing();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PING:
        return isSetPing();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      boolean this_present_ping = true && this.isSetPing();
      boolean that_present_ping = true && that.isSetPing();
      if (this_present_ping || that_present_ping) {
        if (!(this_present_ping && that_present_ping))
          return false;
        if (!this.ping.equals(that.ping))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_args typedOther = (ping_args)other;

      lastComparison = Boolean.valueOf(isSetPing()).compareTo(typedOther.isSetPing());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPing()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ping, typedOther.ping);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append("ping:");
      if (this.ping == null) {
        sb.append("null");
      } else {
        sb.append(this.ping);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ping = iprot.readString();
                struct.setPingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ping != null) {
          oprot.writeFieldBegin(PING_FIELD_DESC);
          oprot.writeString(struct.ping);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPing()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPing()) {
          oprot.writeString(struct.ping);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ping = iprot.readString();
          struct.setPingIsSet(true);
        }
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public ping_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ping_result typedOther = (ping_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class createInterface_args implements org.apache.thrift.TBase<createInterface_args, createInterface_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createInterface_args");

    private static final org.apache.thrift.protocol.TField IFACE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ifaceName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IFACE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ifaceType", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createInterface_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createInterface_argsTupleSchemeFactory());
    }

    public String ifaceName; // required
    /**
     * 
     * @see InterfaceType
     */
    public InterfaceType ifaceType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IFACE_NAME((short)1, "ifaceName"),
      /**
       * 
       * @see InterfaceType
       */
      IFACE_TYPE((short)2, "ifaceType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IFACE_NAME
            return IFACE_NAME;
          case 2: // IFACE_TYPE
            return IFACE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IFACE_NAME, new org.apache.thrift.meta_data.FieldMetaData("ifaceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IFACE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ifaceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, InterfaceType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createInterface_args.class, metaDataMap);
    }

    public createInterface_args() {
    }

    public createInterface_args(
      String ifaceName,
      InterfaceType ifaceType)
    {
      this();
      this.ifaceName = ifaceName;
      this.ifaceType = ifaceType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createInterface_args(createInterface_args other) {
      if (other.isSetIfaceName()) {
        this.ifaceName = other.ifaceName;
      }
      if (other.isSetIfaceType()) {
        this.ifaceType = other.ifaceType;
      }
    }

    public createInterface_args deepCopy() {
      return new createInterface_args(this);
    }

    @Override
    public void clear() {
      this.ifaceName = null;
      this.ifaceType = null;
    }

    public String getIfaceName() {
      return this.ifaceName;
    }

    public createInterface_args setIfaceName(String ifaceName) {
      this.ifaceName = ifaceName;
      return this;
    }

    public void unsetIfaceName() {
      this.ifaceName = null;
    }

    /** Returns true if field ifaceName is set (has been assigned a value) and false otherwise */
    public boolean isSetIfaceName() {
      return this.ifaceName != null;
    }

    public void setIfaceNameIsSet(boolean value) {
      if (!value) {
        this.ifaceName = null;
      }
    }

    /**
     * 
     * @see InterfaceType
     */
    public InterfaceType getIfaceType() {
      return this.ifaceType;
    }

    /**
     * 
     * @see InterfaceType
     */
    public createInterface_args setIfaceType(InterfaceType ifaceType) {
      this.ifaceType = ifaceType;
      return this;
    }

    public void unsetIfaceType() {
      this.ifaceType = null;
    }

    /** Returns true if field ifaceType is set (has been assigned a value) and false otherwise */
    public boolean isSetIfaceType() {
      return this.ifaceType != null;
    }

    public void setIfaceTypeIsSet(boolean value) {
      if (!value) {
        this.ifaceType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IFACE_NAME:
        if (value == null) {
          unsetIfaceName();
        } else {
          setIfaceName((String)value);
        }
        break;

      case IFACE_TYPE:
        if (value == null) {
          unsetIfaceType();
        } else {
          setIfaceType((InterfaceType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IFACE_NAME:
        return getIfaceName();

      case IFACE_TYPE:
        return getIfaceType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IFACE_NAME:
        return isSetIfaceName();
      case IFACE_TYPE:
        return isSetIfaceType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createInterface_args)
        return this.equals((createInterface_args)that);
      return false;
    }

    public boolean equals(createInterface_args that) {
      if (that == null)
        return false;

      boolean this_present_ifaceName = true && this.isSetIfaceName();
      boolean that_present_ifaceName = true && that.isSetIfaceName();
      if (this_present_ifaceName || that_present_ifaceName) {
        if (!(this_present_ifaceName && that_present_ifaceName))
          return false;
        if (!this.ifaceName.equals(that.ifaceName))
          return false;
      }

      boolean this_present_ifaceType = true && this.isSetIfaceType();
      boolean that_present_ifaceType = true && that.isSetIfaceType();
      if (this_present_ifaceType || that_present_ifaceType) {
        if (!(this_present_ifaceType && that_present_ifaceType))
          return false;
        if (!this.ifaceType.equals(that.ifaceType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createInterface_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createInterface_args typedOther = (createInterface_args)other;

      lastComparison = Boolean.valueOf(isSetIfaceName()).compareTo(typedOther.isSetIfaceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIfaceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ifaceName, typedOther.ifaceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIfaceType()).compareTo(typedOther.isSetIfaceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIfaceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ifaceType, typedOther.ifaceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createInterface_args(");
      boolean first = true;

      sb.append("ifaceName:");
      if (this.ifaceName == null) {
        sb.append("null");
      } else {
        sb.append(this.ifaceName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ifaceType:");
      if (this.ifaceType == null) {
        sb.append("null");
      } else {
        sb.append(this.ifaceType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createInterface_argsStandardSchemeFactory implements SchemeFactory {
      public createInterface_argsStandardScheme getScheme() {
        return new createInterface_argsStandardScheme();
      }
    }

    private static class createInterface_argsStandardScheme extends StandardScheme<createInterface_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createInterface_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IFACE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ifaceName = iprot.readString();
                struct.setIfaceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IFACE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.ifaceType = InterfaceType.findByValue(iprot.readI32());
                struct.setIfaceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createInterface_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ifaceName != null) {
          oprot.writeFieldBegin(IFACE_NAME_FIELD_DESC);
          oprot.writeString(struct.ifaceName);
          oprot.writeFieldEnd();
        }
        if (struct.ifaceType != null) {
          oprot.writeFieldBegin(IFACE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.ifaceType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createInterface_argsTupleSchemeFactory implements SchemeFactory {
      public createInterface_argsTupleScheme getScheme() {
        return new createInterface_argsTupleScheme();
      }
    }

    private static class createInterface_argsTupleScheme extends TupleScheme<createInterface_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIfaceName()) {
          optionals.set(0);
        }
        if (struct.isSetIfaceType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIfaceName()) {
          oprot.writeString(struct.ifaceName);
        }
        if (struct.isSetIfaceType()) {
          oprot.writeI32(struct.ifaceType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ifaceName = iprot.readString();
          struct.setIfaceNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ifaceType = InterfaceType.findByValue(iprot.readI32());
          struct.setIfaceTypeIsSet(true);
        }
      }
    }

  }

  public static class createInterface_result implements org.apache.thrift.TBase<createInterface_result, createInterface_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createInterface_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createInterface_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createInterface_resultTupleSchemeFactory());
    }

    public TunTapInterface success; // required
    public InvalidOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TunTapInterface.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createInterface_result.class, metaDataMap);
    }

    public createInterface_result() {
    }

    public createInterface_result(
      TunTapInterface success,
      InvalidOperationException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createInterface_result(createInterface_result other) {
      if (other.isSetSuccess()) {
        this.success = new TunTapInterface(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new InvalidOperationException(other.ex);
      }
    }

    public createInterface_result deepCopy() {
      return new createInterface_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public TunTapInterface getSuccess() {
      return this.success;
    }

    public createInterface_result setSuccess(TunTapInterface success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidOperationException getEx() {
      return this.ex;
    }

    public createInterface_result setEx(InvalidOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TunTapInterface)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((InvalidOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createInterface_result)
        return this.equals((createInterface_result)that);
      return false;
    }

    public boolean equals(createInterface_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createInterface_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createInterface_result typedOther = (createInterface_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createInterface_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createInterface_resultStandardSchemeFactory implements SchemeFactory {
      public createInterface_resultStandardScheme getScheme() {
        return new createInterface_resultStandardScheme();
      }
    }

    private static class createInterface_resultStandardScheme extends StandardScheme<createInterface_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createInterface_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TunTapInterface();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new InvalidOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createInterface_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createInterface_resultTupleSchemeFactory implements SchemeFactory {
      public createInterface_resultTupleScheme getScheme() {
        return new createInterface_resultTupleScheme();
      }
    }

    private static class createInterface_resultTupleScheme extends TupleScheme<createInterface_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new TunTapInterface();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new InvalidOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class deleteTapInterface_args implements org.apache.thrift.TBase<deleteTapInterface_args, deleteTapInterface_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTapInterface_args");

    private static final org.apache.thrift.protocol.TField IFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("iface", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTapInterface_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTapInterface_argsTupleSchemeFactory());
    }

    public TunTapInterface iface; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IFACE((short)1, "iface");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IFACE
            return IFACE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IFACE, new org.apache.thrift.meta_data.FieldMetaData("iface", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TunTapInterface.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTapInterface_args.class, metaDataMap);
    }

    public deleteTapInterface_args() {
    }

    public deleteTapInterface_args(
      TunTapInterface iface)
    {
      this();
      this.iface = iface;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTapInterface_args(deleteTapInterface_args other) {
      if (other.isSetIface()) {
        this.iface = new TunTapInterface(other.iface);
      }
    }

    public deleteTapInterface_args deepCopy() {
      return new deleteTapInterface_args(this);
    }

    @Override
    public void clear() {
      this.iface = null;
    }

    public TunTapInterface getIface() {
      return this.iface;
    }

    public deleteTapInterface_args setIface(TunTapInterface iface) {
      this.iface = iface;
      return this;
    }

    public void unsetIface() {
      this.iface = null;
    }

    /** Returns true if field iface is set (has been assigned a value) and false otherwise */
    public boolean isSetIface() {
      return this.iface != null;
    }

    public void setIfaceIsSet(boolean value) {
      if (!value) {
        this.iface = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IFACE:
        if (value == null) {
          unsetIface();
        } else {
          setIface((TunTapInterface)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IFACE:
        return getIface();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IFACE:
        return isSetIface();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTapInterface_args)
        return this.equals((deleteTapInterface_args)that);
      return false;
    }

    public boolean equals(deleteTapInterface_args that) {
      if (that == null)
        return false;

      boolean this_present_iface = true && this.isSetIface();
      boolean that_present_iface = true && that.isSetIface();
      if (this_present_iface || that_present_iface) {
        if (!(this_present_iface && that_present_iface))
          return false;
        if (!this.iface.equals(that.iface))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteTapInterface_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteTapInterface_args typedOther = (deleteTapInterface_args)other;

      lastComparison = Boolean.valueOf(isSetIface()).compareTo(typedOther.isSetIface());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIface()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iface, typedOther.iface);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTapInterface_args(");
      boolean first = true;

      sb.append("iface:");
      if (this.iface == null) {
        sb.append("null");
      } else {
        sb.append(this.iface);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTapInterface_argsStandardSchemeFactory implements SchemeFactory {
      public deleteTapInterface_argsStandardScheme getScheme() {
        return new deleteTapInterface_argsStandardScheme();
      }
    }

    private static class deleteTapInterface_argsStandardScheme extends StandardScheme<deleteTapInterface_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTapInterface_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IFACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.iface = new TunTapInterface();
                struct.iface.read(iprot);
                struct.setIfaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTapInterface_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.iface != null) {
          oprot.writeFieldBegin(IFACE_FIELD_DESC);
          struct.iface.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTapInterface_argsTupleSchemeFactory implements SchemeFactory {
      public deleteTapInterface_argsTupleScheme getScheme() {
        return new deleteTapInterface_argsTupleScheme();
      }
    }

    private static class deleteTapInterface_argsTupleScheme extends TupleScheme<deleteTapInterface_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTapInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIface()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIface()) {
          struct.iface.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTapInterface_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.iface = new TunTapInterface();
          struct.iface.read(iprot);
          struct.setIfaceIsSet(true);
        }
      }
    }

  }

  public static class deleteTapInterface_result implements org.apache.thrift.TBase<deleteTapInterface_result, deleteTapInterface_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTapInterface_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteTapInterface_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteTapInterface_resultTupleSchemeFactory());
    }

    public InvalidOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTapInterface_result.class, metaDataMap);
    }

    public deleteTapInterface_result() {
    }

    public deleteTapInterface_result(
      InvalidOperationException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTapInterface_result(deleteTapInterface_result other) {
      if (other.isSetEx()) {
        this.ex = new InvalidOperationException(other.ex);
      }
    }

    public deleteTapInterface_result deepCopy() {
      return new deleteTapInterface_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public InvalidOperationException getEx() {
      return this.ex;
    }

    public deleteTapInterface_result setEx(InvalidOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((InvalidOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTapInterface_result)
        return this.equals((deleteTapInterface_result)that);
      return false;
    }

    public boolean equals(deleteTapInterface_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteTapInterface_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteTapInterface_result typedOther = (deleteTapInterface_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteTapInterface_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTapInterface_resultStandardSchemeFactory implements SchemeFactory {
      public deleteTapInterface_resultStandardScheme getScheme() {
        return new deleteTapInterface_resultStandardScheme();
      }
    }

    private static class deleteTapInterface_resultStandardScheme extends StandardScheme<deleteTapInterface_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTapInterface_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new InvalidOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTapInterface_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTapInterface_resultTupleSchemeFactory implements SchemeFactory {
      public deleteTapInterface_resultTupleScheme getScheme() {
        return new deleteTapInterface_resultTupleScheme();
      }
    }

    private static class deleteTapInterface_resultTupleScheme extends TupleScheme<deleteTapInterface_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTapInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTapInterface_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new InvalidOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class setHardwareAddress_args implements org.apache.thrift.TBase<setHardwareAddress_args, setHardwareAddress_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setHardwareAddress_args");

    private static final org.apache.thrift.protocol.TField MAC_FIELD_DESC = new org.apache.thrift.protocol.TField("mac", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("iface", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setHardwareAddress_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setHardwareAddress_argsTupleSchemeFactory());
    }

    public String mac; // required
    public TunTapInterface iface; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAC((short)1, "mac"),
      IFACE((short)2, "iface");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAC
            return MAC;
          case 2: // IFACE
            return IFACE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAC, new org.apache.thrift.meta_data.FieldMetaData("mac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IFACE, new org.apache.thrift.meta_data.FieldMetaData("iface", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TunTapInterface.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setHardwareAddress_args.class, metaDataMap);
    }

    public setHardwareAddress_args() {
    }

    public setHardwareAddress_args(
      String mac,
      TunTapInterface iface)
    {
      this();
      this.mac = mac;
      this.iface = iface;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setHardwareAddress_args(setHardwareAddress_args other) {
      if (other.isSetMac()) {
        this.mac = other.mac;
      }
      if (other.isSetIface()) {
        this.iface = new TunTapInterface(other.iface);
      }
    }

    public setHardwareAddress_args deepCopy() {
      return new setHardwareAddress_args(this);
    }

    @Override
    public void clear() {
      this.mac = null;
      this.iface = null;
    }

    public String getMac() {
      return this.mac;
    }

    public setHardwareAddress_args setMac(String mac) {
      this.mac = mac;
      return this;
    }

    public void unsetMac() {
      this.mac = null;
    }

    /** Returns true if field mac is set (has been assigned a value) and false otherwise */
    public boolean isSetMac() {
      return this.mac != null;
    }

    public void setMacIsSet(boolean value) {
      if (!value) {
        this.mac = null;
      }
    }

    public TunTapInterface getIface() {
      return this.iface;
    }

    public setHardwareAddress_args setIface(TunTapInterface iface) {
      this.iface = iface;
      return this;
    }

    public void unsetIface() {
      this.iface = null;
    }

    /** Returns true if field iface is set (has been assigned a value) and false otherwise */
    public boolean isSetIface() {
      return this.iface != null;
    }

    public void setIfaceIsSet(boolean value) {
      if (!value) {
        this.iface = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAC:
        if (value == null) {
          unsetMac();
        } else {
          setMac((String)value);
        }
        break;

      case IFACE:
        if (value == null) {
          unsetIface();
        } else {
          setIface((TunTapInterface)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAC:
        return getMac();

      case IFACE:
        return getIface();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAC:
        return isSetMac();
      case IFACE:
        return isSetIface();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setHardwareAddress_args)
        return this.equals((setHardwareAddress_args)that);
      return false;
    }

    public boolean equals(setHardwareAddress_args that) {
      if (that == null)
        return false;

      boolean this_present_mac = true && this.isSetMac();
      boolean that_present_mac = true && that.isSetMac();
      if (this_present_mac || that_present_mac) {
        if (!(this_present_mac && that_present_mac))
          return false;
        if (!this.mac.equals(that.mac))
          return false;
      }

      boolean this_present_iface = true && this.isSetIface();
      boolean that_present_iface = true && that.isSetIface();
      if (this_present_iface || that_present_iface) {
        if (!(this_present_iface && that_present_iface))
          return false;
        if (!this.iface.equals(that.iface))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setHardwareAddress_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setHardwareAddress_args typedOther = (setHardwareAddress_args)other;

      lastComparison = Boolean.valueOf(isSetMac()).compareTo(typedOther.isSetMac());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMac()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mac, typedOther.mac);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIface()).compareTo(typedOther.isSetIface());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIface()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iface, typedOther.iface);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setHardwareAddress_args(");
      boolean first = true;

      sb.append("mac:");
      if (this.mac == null) {
        sb.append("null");
      } else {
        sb.append(this.mac);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iface:");
      if (this.iface == null) {
        sb.append("null");
      } else {
        sb.append(this.iface);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setHardwareAddress_argsStandardSchemeFactory implements SchemeFactory {
      public setHardwareAddress_argsStandardScheme getScheme() {
        return new setHardwareAddress_argsStandardScheme();
      }
    }

    private static class setHardwareAddress_argsStandardScheme extends StandardScheme<setHardwareAddress_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setHardwareAddress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mac = iprot.readString();
                struct.setMacIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IFACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.iface = new TunTapInterface();
                struct.iface.read(iprot);
                struct.setIfaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setHardwareAddress_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mac != null) {
          oprot.writeFieldBegin(MAC_FIELD_DESC);
          oprot.writeString(struct.mac);
          oprot.writeFieldEnd();
        }
        if (struct.iface != null) {
          oprot.writeFieldBegin(IFACE_FIELD_DESC);
          struct.iface.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setHardwareAddress_argsTupleSchemeFactory implements SchemeFactory {
      public setHardwareAddress_argsTupleScheme getScheme() {
        return new setHardwareAddress_argsTupleScheme();
      }
    }

    private static class setHardwareAddress_argsTupleScheme extends TupleScheme<setHardwareAddress_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setHardwareAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMac()) {
          optionals.set(0);
        }
        if (struct.isSetIface()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMac()) {
          oprot.writeString(struct.mac);
        }
        if (struct.isSetIface()) {
          struct.iface.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setHardwareAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mac = iprot.readString();
          struct.setMacIsSet(true);
        }
        if (incoming.get(1)) {
          struct.iface = new TunTapInterface();
          struct.iface.read(iprot);
          struct.setIfaceIsSet(true);
        }
      }
    }

  }

  public static class setHardwareAddress_result implements org.apache.thrift.TBase<setHardwareAddress_result, setHardwareAddress_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setHardwareAddress_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setHardwareAddress_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setHardwareAddress_resultTupleSchemeFactory());
    }

    public InvalidOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setHardwareAddress_result.class, metaDataMap);
    }

    public setHardwareAddress_result() {
    }

    public setHardwareAddress_result(
      InvalidOperationException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setHardwareAddress_result(setHardwareAddress_result other) {
      if (other.isSetEx()) {
        this.ex = new InvalidOperationException(other.ex);
      }
    }

    public setHardwareAddress_result deepCopy() {
      return new setHardwareAddress_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public InvalidOperationException getEx() {
      return this.ex;
    }

    public setHardwareAddress_result setEx(InvalidOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((InvalidOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setHardwareAddress_result)
        return this.equals((setHardwareAddress_result)that);
      return false;
    }

    public boolean equals(setHardwareAddress_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setHardwareAddress_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setHardwareAddress_result typedOther = (setHardwareAddress_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setHardwareAddress_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setHardwareAddress_resultStandardSchemeFactory implements SchemeFactory {
      public setHardwareAddress_resultStandardScheme getScheme() {
        return new setHardwareAddress_resultStandardScheme();
      }
    }

    private static class setHardwareAddress_resultStandardScheme extends StandardScheme<setHardwareAddress_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setHardwareAddress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new InvalidOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setHardwareAddress_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setHardwareAddress_resultTupleSchemeFactory implements SchemeFactory {
      public setHardwareAddress_resultTupleScheme getScheme() {
        return new setHardwareAddress_resultTupleScheme();
      }
    }

    private static class setHardwareAddress_resultTupleScheme extends TupleScheme<setHardwareAddress_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setHardwareAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setHardwareAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new InvalidOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class writeEthernetFrame_args implements org.apache.thrift.TBase<writeEthernetFrame_args, writeEthernetFrame_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeEthernetFrame_args");

    private static final org.apache.thrift.protocol.TField FRAME_FIELD_DESC = new org.apache.thrift.protocol.TField("frame", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("iface", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writeEthernetFrame_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writeEthernetFrame_argsTupleSchemeFactory());
    }

    public ByteBuffer frame; // required
    public TunTapInterface iface; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FRAME((short)1, "frame"),
      IFACE((short)2, "iface");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FRAME
            return FRAME;
          case 2: // IFACE
            return IFACE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FRAME, new org.apache.thrift.meta_data.FieldMetaData("frame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "EthernetFrame")));
      tmpMap.put(_Fields.IFACE, new org.apache.thrift.meta_data.FieldMetaData("iface", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TunTapInterface.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeEthernetFrame_args.class, metaDataMap);
    }

    public writeEthernetFrame_args() {
    }

    public writeEthernetFrame_args(
      ByteBuffer frame,
      TunTapInterface iface)
    {
      this();
      this.frame = frame;
      this.iface = iface;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeEthernetFrame_args(writeEthernetFrame_args other) {
      if (other.isSetFrame()) {
        this.frame = other.frame;
      }
      if (other.isSetIface()) {
        this.iface = new TunTapInterface(other.iface);
      }
    }

    public writeEthernetFrame_args deepCopy() {
      return new writeEthernetFrame_args(this);
    }

    @Override
    public void clear() {
      this.frame = null;
      this.iface = null;
    }

    public byte[] getFrame() {
      setFrame(org.apache.thrift.TBaseHelper.rightSize(frame));
      return frame == null ? null : frame.array();
    }

    public ByteBuffer bufferForFrame() {
      return frame;
    }

    public writeEthernetFrame_args setFrame(byte[] frame) {
      setFrame(frame == null ? (ByteBuffer)null : ByteBuffer.wrap(frame));
      return this;
    }

    public writeEthernetFrame_args setFrame(ByteBuffer frame) {
      this.frame = frame;
      return this;
    }

    public void unsetFrame() {
      this.frame = null;
    }

    /** Returns true if field frame is set (has been assigned a value) and false otherwise */
    public boolean isSetFrame() {
      return this.frame != null;
    }

    public void setFrameIsSet(boolean value) {
      if (!value) {
        this.frame = null;
      }
    }

    public TunTapInterface getIface() {
      return this.iface;
    }

    public writeEthernetFrame_args setIface(TunTapInterface iface) {
      this.iface = iface;
      return this;
    }

    public void unsetIface() {
      this.iface = null;
    }

    /** Returns true if field iface is set (has been assigned a value) and false otherwise */
    public boolean isSetIface() {
      return this.iface != null;
    }

    public void setIfaceIsSet(boolean value) {
      if (!value) {
        this.iface = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FRAME:
        if (value == null) {
          unsetFrame();
        } else {
          setFrame((ByteBuffer)value);
        }
        break;

      case IFACE:
        if (value == null) {
          unsetIface();
        } else {
          setIface((TunTapInterface)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FRAME:
        return getFrame();

      case IFACE:
        return getIface();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FRAME:
        return isSetFrame();
      case IFACE:
        return isSetIface();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeEthernetFrame_args)
        return this.equals((writeEthernetFrame_args)that);
      return false;
    }

    public boolean equals(writeEthernetFrame_args that) {
      if (that == null)
        return false;

      boolean this_present_frame = true && this.isSetFrame();
      boolean that_present_frame = true && that.isSetFrame();
      if (this_present_frame || that_present_frame) {
        if (!(this_present_frame && that_present_frame))
          return false;
        if (!this.frame.equals(that.frame))
          return false;
      }

      boolean this_present_iface = true && this.isSetIface();
      boolean that_present_iface = true && that.isSetIface();
      if (this_present_iface || that_present_iface) {
        if (!(this_present_iface && that_present_iface))
          return false;
        if (!this.iface.equals(that.iface))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(writeEthernetFrame_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      writeEthernetFrame_args typedOther = (writeEthernetFrame_args)other;

      lastComparison = Boolean.valueOf(isSetFrame()).compareTo(typedOther.isSetFrame());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFrame()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frame, typedOther.frame);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIface()).compareTo(typedOther.isSetIface());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIface()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iface, typedOther.iface);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeEthernetFrame_args(");
      boolean first = true;

      sb.append("frame:");
      if (this.frame == null) {
        sb.append("null");
      } else {
        sb.append(this.frame);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iface:");
      if (this.iface == null) {
        sb.append("null");
      } else {
        sb.append(this.iface);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeEthernetFrame_argsStandardSchemeFactory implements SchemeFactory {
      public writeEthernetFrame_argsStandardScheme getScheme() {
        return new writeEthernetFrame_argsStandardScheme();
      }
    }

    private static class writeEthernetFrame_argsStandardScheme extends StandardScheme<writeEthernetFrame_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeEthernetFrame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FRAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.frame = iprot.readBinary();
                struct.setFrameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IFACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.iface = new TunTapInterface();
                struct.iface.read(iprot);
                struct.setIfaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeEthernetFrame_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.frame != null) {
          oprot.writeFieldBegin(FRAME_FIELD_DESC);
          oprot.writeBinary(struct.frame);
          oprot.writeFieldEnd();
        }
        if (struct.iface != null) {
          oprot.writeFieldBegin(IFACE_FIELD_DESC);
          struct.iface.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeEthernetFrame_argsTupleSchemeFactory implements SchemeFactory {
      public writeEthernetFrame_argsTupleScheme getScheme() {
        return new writeEthernetFrame_argsTupleScheme();
      }
    }

    private static class writeEthernetFrame_argsTupleScheme extends TupleScheme<writeEthernetFrame_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeEthernetFrame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFrame()) {
          optionals.set(0);
        }
        if (struct.isSetIface()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFrame()) {
          oprot.writeBinary(struct.frame);
        }
        if (struct.isSetIface()) {
          struct.iface.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeEthernetFrame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.frame = iprot.readBinary();
          struct.setFrameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.iface = new TunTapInterface();
          struct.iface.read(iprot);
          struct.setIfaceIsSet(true);
        }
      }
    }

  }

  public static class writeEthernetFrame_result implements org.apache.thrift.TBase<writeEthernetFrame_result, writeEthernetFrame_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeEthernetFrame_result");

    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writeEthernetFrame_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writeEthernetFrame_resultTupleSchemeFactory());
    }

    public InvalidOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeEthernetFrame_result.class, metaDataMap);
    }

    public writeEthernetFrame_result() {
    }

    public writeEthernetFrame_result(
      InvalidOperationException ex)
    {
      this();
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeEthernetFrame_result(writeEthernetFrame_result other) {
      if (other.isSetEx()) {
        this.ex = new InvalidOperationException(other.ex);
      }
    }

    public writeEthernetFrame_result deepCopy() {
      return new writeEthernetFrame_result(this);
    }

    @Override
    public void clear() {
      this.ex = null;
    }

    public InvalidOperationException getEx() {
      return this.ex;
    }

    public writeEthernetFrame_result setEx(InvalidOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((InvalidOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeEthernetFrame_result)
        return this.equals((writeEthernetFrame_result)that);
      return false;
    }

    public boolean equals(writeEthernetFrame_result that) {
      if (that == null)
        return false;

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(writeEthernetFrame_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      writeEthernetFrame_result typedOther = (writeEthernetFrame_result)other;

      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeEthernetFrame_result(");
      boolean first = true;

      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeEthernetFrame_resultStandardSchemeFactory implements SchemeFactory {
      public writeEthernetFrame_resultStandardScheme getScheme() {
        return new writeEthernetFrame_resultStandardScheme();
      }
    }

    private static class writeEthernetFrame_resultStandardScheme extends StandardScheme<writeEthernetFrame_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeEthernetFrame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new InvalidOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeEthernetFrame_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeEthernetFrame_resultTupleSchemeFactory implements SchemeFactory {
      public writeEthernetFrame_resultTupleScheme getScheme() {
        return new writeEthernetFrame_resultTupleScheme();
      }
    }

    private static class writeEthernetFrame_resultTupleScheme extends TupleScheme<writeEthernetFrame_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeEthernetFrame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEx()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeEthernetFrame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ex = new InvalidOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class readEthernetFrame_args implements org.apache.thrift.TBase<readEthernetFrame_args, readEthernetFrame_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readEthernetFrame_args");

    private static final org.apache.thrift.protocol.TField IFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("iface", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TIMEOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readEthernetFrame_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readEthernetFrame_argsTupleSchemeFactory());
    }

    public TunTapInterface iface; // required
    public long timeout; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IFACE((short)1, "iface"),
      TIMEOUT((short)2, "timeout");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IFACE
            return IFACE;
          case 2: // TIMEOUT
            return TIMEOUT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMEOUT_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IFACE, new org.apache.thrift.meta_data.FieldMetaData("iface", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TunTapInterface.class)));
      tmpMap.put(_Fields.TIMEOUT, new org.apache.thrift.meta_data.FieldMetaData("timeout", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readEthernetFrame_args.class, metaDataMap);
    }

    public readEthernetFrame_args() {
    }

    public readEthernetFrame_args(
      TunTapInterface iface,
      long timeout)
    {
      this();
      this.iface = iface;
      this.timeout = timeout;
      setTimeoutIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readEthernetFrame_args(readEthernetFrame_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetIface()) {
        this.iface = new TunTapInterface(other.iface);
      }
      this.timeout = other.timeout;
    }

    public readEthernetFrame_args deepCopy() {
      return new readEthernetFrame_args(this);
    }

    @Override
    public void clear() {
      this.iface = null;
      setTimeoutIsSet(false);
      this.timeout = 0;
    }

    public TunTapInterface getIface() {
      return this.iface;
    }

    public readEthernetFrame_args setIface(TunTapInterface iface) {
      this.iface = iface;
      return this;
    }

    public void unsetIface() {
      this.iface = null;
    }

    /** Returns true if field iface is set (has been assigned a value) and false otherwise */
    public boolean isSetIface() {
      return this.iface != null;
    }

    public void setIfaceIsSet(boolean value) {
      if (!value) {
        this.iface = null;
      }
    }

    public long getTimeout() {
      return this.timeout;
    }

    public readEthernetFrame_args setTimeout(long timeout) {
      this.timeout = timeout;
      setTimeoutIsSet(true);
      return this;
    }

    public void unsetTimeout() {
      __isset_bit_vector.clear(__TIMEOUT_ISSET_ID);
    }

    /** Returns true if field timeout is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout() {
      return __isset_bit_vector.get(__TIMEOUT_ISSET_ID);
    }

    public void setTimeoutIsSet(boolean value) {
      __isset_bit_vector.set(__TIMEOUT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IFACE:
        if (value == null) {
          unsetIface();
        } else {
          setIface((TunTapInterface)value);
        }
        break;

      case TIMEOUT:
        if (value == null) {
          unsetTimeout();
        } else {
          setTimeout((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IFACE:
        return getIface();

      case TIMEOUT:
        return Long.valueOf(getTimeout());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IFACE:
        return isSetIface();
      case TIMEOUT:
        return isSetTimeout();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readEthernetFrame_args)
        return this.equals((readEthernetFrame_args)that);
      return false;
    }

    public boolean equals(readEthernetFrame_args that) {
      if (that == null)
        return false;

      boolean this_present_iface = true && this.isSetIface();
      boolean that_present_iface = true && that.isSetIface();
      if (this_present_iface || that_present_iface) {
        if (!(this_present_iface && that_present_iface))
          return false;
        if (!this.iface.equals(that.iface))
          return false;
      }

      boolean this_present_timeout = true;
      boolean that_present_timeout = true;
      if (this_present_timeout || that_present_timeout) {
        if (!(this_present_timeout && that_present_timeout))
          return false;
        if (this.timeout != that.timeout)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readEthernetFrame_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readEthernetFrame_args typedOther = (readEthernetFrame_args)other;

      lastComparison = Boolean.valueOf(isSetIface()).compareTo(typedOther.isSetIface());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIface()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iface, typedOther.iface);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout()).compareTo(typedOther.isSetTimeout());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout, typedOther.timeout);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readEthernetFrame_args(");
      boolean first = true;

      sb.append("iface:");
      if (this.iface == null) {
        sb.append("null");
      } else {
        sb.append(this.iface);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout:");
      sb.append(this.timeout);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readEthernetFrame_argsStandardSchemeFactory implements SchemeFactory {
      public readEthernetFrame_argsStandardScheme getScheme() {
        return new readEthernetFrame_argsStandardScheme();
      }
    }

    private static class readEthernetFrame_argsStandardScheme extends StandardScheme<readEthernetFrame_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readEthernetFrame_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IFACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.iface = new TunTapInterface();
                struct.iface.read(iprot);
                struct.setIfaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIMEOUT
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timeout = iprot.readI64();
                struct.setTimeoutIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readEthernetFrame_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.iface != null) {
          oprot.writeFieldBegin(IFACE_FIELD_DESC);
          struct.iface.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
        oprot.writeI64(struct.timeout);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readEthernetFrame_argsTupleSchemeFactory implements SchemeFactory {
      public readEthernetFrame_argsTupleScheme getScheme() {
        return new readEthernetFrame_argsTupleScheme();
      }
    }

    private static class readEthernetFrame_argsTupleScheme extends TupleScheme<readEthernetFrame_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readEthernetFrame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIface()) {
          optionals.set(0);
        }
        if (struct.isSetTimeout()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIface()) {
          struct.iface.write(oprot);
        }
        if (struct.isSetTimeout()) {
          oprot.writeI64(struct.timeout);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readEthernetFrame_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.iface = new TunTapInterface();
          struct.iface.read(iprot);
          struct.setIfaceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timeout = iprot.readI64();
          struct.setTimeoutIsSet(true);
        }
      }
    }

  }

  public static class readEthernetFrame_result implements org.apache.thrift.TBase<readEthernetFrame_result, readEthernetFrame_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readEthernetFrame_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readEthernetFrame_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readEthernetFrame_resultTupleSchemeFactory());
    }

    public ByteBuffer success; // required
    public InvalidOperationException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "EthernetFrame")));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readEthernetFrame_result.class, metaDataMap);
    }

    public readEthernetFrame_result() {
    }

    public readEthernetFrame_result(
      ByteBuffer success,
      InvalidOperationException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readEthernetFrame_result(readEthernetFrame_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEx()) {
        this.ex = new InvalidOperationException(other.ex);
      }
    }

    public readEthernetFrame_result deepCopy() {
      return new readEthernetFrame_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public readEthernetFrame_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public readEthernetFrame_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public InvalidOperationException getEx() {
      return this.ex;
    }

    public readEthernetFrame_result setEx(InvalidOperationException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((InvalidOperationException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readEthernetFrame_result)
        return this.equals((readEthernetFrame_result)that);
      return false;
    }

    public boolean equals(readEthernetFrame_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readEthernetFrame_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readEthernetFrame_result typedOther = (readEthernetFrame_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, typedOther.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readEthernetFrame_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readEthernetFrame_resultStandardSchemeFactory implements SchemeFactory {
      public readEthernetFrame_resultStandardScheme getScheme() {
        return new readEthernetFrame_resultStandardScheme();
      }
    }

    private static class readEthernetFrame_resultStandardScheme extends StandardScheme<readEthernetFrame_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readEthernetFrame_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new InvalidOperationException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readEthernetFrame_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readEthernetFrame_resultTupleSchemeFactory implements SchemeFactory {
      public readEthernetFrame_resultTupleScheme getScheme() {
        return new readEthernetFrame_resultTupleScheme();
      }
    }

    private static class readEthernetFrame_resultTupleScheme extends TupleScheme<readEthernetFrame_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readEthernetFrame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readEthernetFrame_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new InvalidOperationException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
